print("This simulator calculates the probability for any possible combination of attacker and defender dice not limited to the game of Risk. Can freely set number of attacker and defender dice and number of sides of dice.")

import random
import matplotlib.pyplot as plt

random.seed(1234)

def dice_roll_simulator(dicecount, n):
    result = []
    for i in range(dicecount):
        result.append(random.randint(1, n))
    result.sort(reverse=True)
    return result


def battle(a, d, n):
    attacker_result = dice_roll_simulator(a, n)
    defender_result = dice_roll_simulator(d, n)
    a_wins_per_round = 0
    for i in range(d):
        if attacker_result[i] > defender_result[i]:
            a_wins_per_round = a_wins_per_round + 1
    return a_wins_per_round


takeinput0 = True
while takeinput0 == True:
    attacker_dicecount = int(input("Attacker, how many dice do you want to roll: "))
    if attacker_dicecount >= 1:
        takeinput0 = False
    else:
        takeinput0 = True
        print("Attacker dice count values cannot be less than 1. Repeat.")

    defender_dicecount = int(input("Defender, how many dice do you want to roll: "))
    if defender_dicecount >= 1:
        takeinput0 = False
    else:
        takeinput0 = True
        print("Defender dice count values cannot be less than 1. Repeat.")

    if attacker_dicecount >= defender_dicecount:
        takeinput0 = False
    else:
        takeinput0 = True
        print("Attacker dice count value must be more or equal than defender dice count value. Repeat.")

takeinput1 = True
while takeinput1 == True:
    dicesides = int(input("How many sides does your dice have? "))
    if dicesides >= 2:
        takeinput1 = False
    else:
        print("Number of dice sides cannot be less than 2. Repeat.")

takeinput2 = True
while takeinput2 == True:
    roundcount = int(input("How many rounds do you want to simulate? "))
    if roundcount > 0:
        takeinput2 = False
    else:
        print("Number of rounds cannot be negative. Repeat.")

att_win_k = {}
for i in range(0, defender_dicecount + 1):
    key = i
    value = 0
    att_win_k[key] = value

for i in range(roundcount):
    single_battle = battle(attacker_dicecount, defender_dicecount, dicesides)
    for i in range(0, defender_dicecount + 1):
        if single_battle == i:
            att_win_k[i] += 1

prob_att_win_k = {}
for i in range(0, defender_dicecount + 1):
    key1 = i
    value1 = att_win_k[i] / roundcount
    prob_att_win_k[key1] = value1

print(prob_att_win_k)

prob_sum = 0
for i in range(0, defender_dicecount + 1):
    prob_sum += prob_att_win_k[i]
if prob_sum == 1:
    print("Simulation successful")

#plotting graph from results
# x-coordinates of left sides of bars
left = []
tick_label = []
for i in range(0, defender_dicecount + 1):
    left.append(i)
    # labels for bars
    tick_label.append(i)

# heights of bars
height = []
for i in range(0,defender_dicecount + 1):
    height.append(att_win_k[i] / roundcount)

# plotting a bar chart
plt.bar(left, height, tick_label=tick_label,
        width=0.8, color=['blue'])

# naming the x-axis
plt.xlabel('Attacker Wins')
# naming the y-axis
plt.ylabel('Probability')

# function to show the plot
plt.show()
